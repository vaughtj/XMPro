<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Prism.Ninject.Forms</name>
    </assembly>
    <members>
        <member name="T:Prism.Ninject.Extensions.DependencyServiceBindingResolver">
            <summary>
            Resolves missing dependencies using <see cref="T:Xamarin.Forms.DependencyService"/>
            </summary>
        </member>
        <member name="M:Prism.Ninject.Extensions.DependencyServiceBindingResolver.Resolve(Ninject.Infrastructure.Multimap{System.Type,Ninject.Planning.Bindings.IBinding},Ninject.Activation.IRequest)">
            <inheritDoc />
        </member>
        <member name="M:Prism.Ninject.Extensions.DependencyServiceBindingResolver.CreateDependencyServiceProvider(System.Type)">
            <inheritDoc />
        </member>
        <member name="T:Prism.Ninject.Extensions.DependencyServiceProvider">
            <summary>
            Creates instances of services using the
            <see cref="T:Xamarin.Forms.DependencyService"/>
            </summary>
        </member>
        <member name="M:Prism.Ninject.Extensions.DependencyServiceProvider.#ctor(System.Type)">
            <summary>
            Constructs a <see cref="T:Prism.Ninject.Extensions.DependencyServiceProvider"/>
            </summary>
            <param name="type">The type that this provider resolves</param>
        </member>
        <member name="P:Prism.Ninject.Extensions.DependencyServiceProvider.Type">
            <inheritDoc />
        </member>
        <member name="M:Prism.Ninject.Extensions.DependencyServiceProvider.Create(Ninject.Activation.IContext)">
            <inheritDoc />
        </member>
        <member name="M:Prism.Ninject.NinjectExtensions.RegisterTypeForNavigation``1(Ninject.IKernel,System.String)">
            <summary>
            Registers a Page for navigation.
            </summary>
            <typeparam name="TView">The Type of Page to register</typeparam>
            <param name="container"><see cref="T:Ninject.IKernel"/> used to register type for Navigation.</param>
            <param name="name">The unique name to register with the Page</param>
        </member>
        <member name="M:Prism.Ninject.NinjectExtensions.RegisterTypeForNavigation(Ninject.IKernel,System.Type,System.String)">
            <summary>
            Registers a Page for navigation
            </summary>
            <param name="container"><see cref="T:Ninject.IKernel"/> used to register type for Navigation.</param>
            <param name="viewType">The type of Page to register</param>
            <param name="name">The unique name to register with the Page</param>
        </member>
        <member name="M:Prism.Ninject.NinjectExtensions.RegisterTypeForNavigation``2(Ninject.IKernel,System.String)">
            <summary>
            Registers a Page for navigation.
            </summary>
            <typeparam name="TView">The Type of Page to register</typeparam>
            <typeparam name="TViewModel">The ViewModel to use as the unique name for the Page</typeparam>
            <param name="container"><see cref="T:Ninject.IKernel"/> used to register type for Navigation.</param>
            <param name="name">The unique name to register with the Page</param>
        </member>
        <member name="M:Prism.Ninject.NinjectExtensions.RegisterTypeForNavigationOnPlatform``2(Ninject.IKernel,System.String,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Registers a Page for navigation based on the current Device OS using a shared ViewModel
            </summary>
            <typeparam name="TView">Default View Type to be shared across multiple Device Operating Systems if they are not specified directly.</typeparam>
            <typeparam name="TViewModel">Shared ViewModel Type</typeparam>
            <param name="container"><see cref="T:Ninject.IKernel"/> used to register type for Navigation.</param>
            <param name="name">The unique name to register with the Page. If left empty or null will default to the ViewModel root name. i.e. MyPageViewModel => MyPage</param>
            <param name="androidView">Android Specific View Type</param>
            <param name="iOSView">iOS Specific View Type</param>
            <param name="otherView">Other Platform Specific View Type</param>
            <param name="windowsView">Windows Specific View Type</param>
            <param name="winPhoneView">Windows Phone Specific View Type</param>
        </member>
        <member name="M:Prism.Ninject.NinjectExtensions.RegisterTypeForNavigationOnIdiom``2(Ninject.IKernel,System.String,System.Type,System.Type,System.Type)">
            <summary>
            Registers a Page for navigation based on the Device Idiom using a shared ViewModel
            </summary>
            <typeparam name="TView">Default View Type to be used across multiple Idioms if they are not specified directly.</typeparam>
            <typeparam name="TViewModel">The shared ViewModel</typeparam>
            <param name="container"><see cref="T:Ninject.IKernel"/> used to register type for Navigation.</param>
            <param name="name">The common name used for Navigation. If left empty or null will default to the ViewModel root name. i.e. MyPageViewModel => MyPage</param>
            <param name="desktopView">Desktop Specific View Type</param>
            <param name="tabletView">Tablet Specific View Type</param>
            <param name="phoneView">Phone Specific View Type</param>
        </member>
    </members>
</doc>
