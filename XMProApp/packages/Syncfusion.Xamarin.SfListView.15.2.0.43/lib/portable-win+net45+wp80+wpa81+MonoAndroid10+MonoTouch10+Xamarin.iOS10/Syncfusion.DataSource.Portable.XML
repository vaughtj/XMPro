<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.DataSource.Portable</name>
    </assembly>
    <members>
        <member name="M:Syncfusion.DataSource.GroupResultComparer.Compare(Syncfusion.DataSource.Extensions.GroupResult,Syncfusion.DataSource.Extensions.GroupResult)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="T:Syncfusion.DataSource.DisplayItems">
            <summary>
            Virtual collection which hold the list of items to be displayed
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.#ctor(Syncfusion.DataSource.GroupList,System.Collections.Generic.IList{System.Object})">
            <summary>
            Initializes the <see cref="T:Syncfusion.DataSource.DisplayItems"/> 
            </summary>
            <param name="groupList"> <see cref="T:Syncfusion.DataSource.GroupList"/></param>
            <param name="source"> List of objects</param>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.IndexOf(System.Object)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.Insert(System.Int32,System.Object)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.RemoveAt(System.Int32)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.Add(System.Object)">
            <summary>
            Not implemented
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.Clear">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.Contains(System.Object)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.CopyTo(System.Object[],System.Int32)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.Remove(System.Object)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.GetEnumerator">
            <summary>
            Return the IEnumerator of <see cref="T:Syncfusion.DataSource.DisplayItems"/> 
            </summary>
            <returns> IEnumerator</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DisplayItems.Dispose">
            <summary>
            Perform final clean up before it is released from memory.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DisplayItems.Item(System.Int32)">
            <summary>
            Return the display item in the index
            </summary>
            <param name="index">Index of the display item</param>
            <returns>display item</returns>
        </member>
        <member name="P:Syncfusion.DataSource.DisplayItems.Count">
            <summary>
            Return the total number of display items
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DisplayItems.IsReadOnly">
            <summary>
            Returns whether <see cref="T:Syncfusion.DataSource.DisplayItems"/> is read only or not
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.Extensions.FunctionalExtensions">
            <summary>
            Functional method extensions
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.ForEach``1(System.Collections.IEnumerable,System.Action{``0})">
            <summary>
            Iterates over an IEnumerable instance to a delegated function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterates over a generic IEnumerable instance to a delegated function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.IterateIndex``1(``0[],System.Action{System.Int32,``0})">
            <summary>
            Iterates the index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.IterateIndex``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            Iterates the index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.True``1">
            <summary>
            Trues this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.False``1">
            <summary>
            Falses this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ors the specified expr1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr1">The expr1.</param>
            <param name="expr2">The expr2.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ands the specified expr1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr1">The expr1.</param>
            <param name="expr2">The expr2.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.Fold``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            Folds the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="list">The list.</param>
            <param name="func">The func.</param>
            <param name="acc">The acc.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.FoldLeft``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            Folds the left.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="list">The list.</param>
            <param name="func">The func.</param>
            <param name="acc">The acc.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.FoldRight``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            Folds the right.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="list">The list.</param>
            <param name="func">The func.</param>
            <param name="acc">The acc.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.FunctionalExtensions.MoveTo(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Moves to.
            </summary>
            <param name="list">The list.</param>
            <param name="src">The SRC.</param>
            <param name="dest">The dest.</param>
        </member>
        <member name="T:Syncfusion.DataSource.FilterType">
            <summary>
            Specifies the FilterType to be used in LINQ methods.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.LessThan">
            <summary>
            Performs LessThan operation.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.LessThanOrEqual">
            <summary>
            Performs LessThan Or Equal operation.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.Equals">
            <summary>
            Checks Equals on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.NotEquals">
            <summary>
            Checks for Not Equals on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.GreaterThanOrEqual">
            <summary>
            Checks for Greater Than or Equal on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.GreaterThan">
            <summary>
            Checks for Greater Than on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.StartsWith">
            <summary>
            Checks for StartsWith on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.EndsWith">
            <summary>
            Checks for EndsWith on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.Contains">
            <summary>
            Checks for Contains on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.Undefined">
            <summary>
            Returns invalid type
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterType.Between">
            <summary>
            Checks for Between two date on the operands.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.FilterBehavior">
            <summary>
            Specifies the Filter Behaviour for the filter predicates.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterBehavior.StronglyTyped">
            <summary>
            Parses only StronglyTyped values.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterBehavior.StringTyped">
            <summary>
            Parses all values by converting them as string.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.ColumnFilter">
            <summary>
            Specifies the Filter Behaviour for the filter predicates.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.ColumnFilter.Value">
            <summary>
            Parses only StronglyTyped values.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.ColumnFilter.DisplayText">
            <summary>
            Parses all values by converting them as string.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.NullableHelperInternal">
            <summary>
            A framework independent utility class for the new Nullable type in .NET Framework 2.0
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.NullableHelperInternal.IsComplexType(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the specified PropertyDescriptor has nested properties.
            </summary>
            <param name="pd">The PropertyDescriptor to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.NullableHelperInternal.IsComplexType(System.Type)">
            <summary>
            Indicates whether the specified Type has nested properties.
            </summary>
            <param name="t">The Type to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.NullableHelperInternal.ChangeType(System.Object,System.Type)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.NullableHelperInternal.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.NullableHelperInternal.FixDbNUllasNull(System.Object,System.Type)">
            <summary>
            Returns null if value is DBNull and specified type is a Nullable type. Otherwise the value is returned unchanged.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.NullableHelperInternal.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type of a Nullable type. For .NET 1.0 and 1.1 this method will always return null.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.DataSource.NullableHelperInternal.TypeConverterHelper">
            <exclude/>
        </member>
        <member name="T:Syncfusion.DataSource.ValueConvert">
            <summary>
            <see cref="T:Syncfusion.DataSource.ValueConvert"/> provides conversion routines for values
            to convert them to another type and routines for formatting values.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <overload>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </overload>
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="format">Format string.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Overloaded. Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String)">
            <summary>
            Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String[],System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="formats">A string array holding permissible formats used in a <see cref="M:System.Object.ToString"/> call. Right now
            formats is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)">
            <summary>
            Generates display text using the specified format, culture info and number format.
            </summary>
            <param name="value">The value to format.</param>
            <param name="valueType">The value type on which formatting is based. The original value will first be converted to this type.</param>
            <param name="format">The format like in ToString(string format).</param>
            <param name="ci">The <see cref="T:System.Globalization.CultureInfo"/> for formatting the value.</param>
            <param name="nfi">The <see cref="T:System.Globalization.NumberFormatInfo"/> for formatting the value.</param>
            <returns>The string with the formatted text for the value.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.ValueConvert.GetDefaultValue(System.Type)">
            <summary>
            Returns a representative value for any given type. 
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns>A value with the specified type.</returns>
        </member>
        <member name="M:Syncfusion.DataSource.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@)">
            <summary>
            Overloaded. Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@,System.Boolean)">
            <summary>
            Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <param name="allowConvertFromBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.ValueConvert.FormatValueWithTypeInformation(System.Object)">
            <summary>
            Overloaded. Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.ValueConvert.FormatValueWithTypeInformation(System.Object,System.Boolean)">
            <summary>
            Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <param name="allowConvertToBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.ValueConvert.GetTypeName(System.Type)">
            <summary>
            Returns the type name. If type is not in mscorlib, the assembly name is appended.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.ValueConvert.GetType(System.String)">
            <summary>
            Returns the type from the specified name. If an assembly name is appended the list of currently loaded
            assemblies in the current AppDomain are checked.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.ValueConvert.IsEmpty(System.String)">
            <summary>
            Indicates whether string is null or empty.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.DataSource.ValueConvert.AllowFormatValueTrimEnd">
            <summary>
            Indicates whether <see cref="M:Syncfusion.DataSource.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)"/> should trim whitespace characters from
            the end of the formatted text.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.Extensions.QueryableExtensions">
            <summary>
            Provides extension methods for Queryable source. 
            <para></para>
            <para></para>
            <para>var fonts = FontFamily.Families.AsQueryable(); </para>
            <para></para>
            <para></para>
            <para>We would normally write Expressions as, </para>
            <para></para>
            <code lang="C#">var names = new string[] {&quot;Tony&quot;, &quot;Al&quot;,
            &quot;Sean&quot;, &quot;Elia&quot;}.AsQueryable();
            names.OrderBy(n=&gt;n);</code>
            <para></para>
            <para></para>
            <para>This would sort the names based on alphabetical order. Like so, the
            Queryable extensions are a set of extension methods that define functions which
            will generate expressions based on the supplied values to the functions.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.AndPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an AND binary expression for the given Binary expressions.
            <para></para>
            </summary>
            <param name="expr1"></param>
            <param name="expr2"></param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.String,System.Type)">
            <summary>
            Generates the GroupBy Expression
            </summary>
            <param name="groupByName"></param>
            <param name="sortAction"></param>
            <param name="source"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a OrderBy query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders =
            queryable.OrderBy(&quot;ShipCountry&quot;);</code>
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GetLambdaWithComplexPropertyNullCheck(System.Collections.IEnumerable,System.String,System.Linq.Expressions.ParameterExpression,System.Type)">
            <summary>
            Generates lamda expression for the complex properties
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="paramExpression"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an OrderBy query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().OrderBy(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an OrderByDescending query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().OrderByDescending(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a OrderByDescending query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders =
            queryable.OrderByDescending(&quot;ShipCountry&quot;);</code>
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GetValueExpression(System.Linq.Expressions.ParameterExpression,System.String,System.Type)">
            <summary>
            Generate expression from simple and complex property
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
            <param name="paramExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.OrPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an OR binary expression for the given Binary expressions.
            <para></para>
            </summary>
            <param name="expr1"></param>
            <param name="expr2"></param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Parameter(System.Linq.IQueryable)">
            <summary>
            Creates a ParameterExpression that is required when building a series of
            predicates for the WHERE filter.
            <para></para>
            <code lang="C#">        DataClasses1DataContext db = new
            DataClasses1DataContext();
                    var orders = db.Orders.Skip(0).Take(100).ToList();
                    var queryable = orders.AsQueryable();
                    var parameter =
            queryable.Parameter();</code>
            <para></para>
            <para></para>Use this same parameter passed to generate different predicates and
            finally to generate the Lambda.
            </summary>
            <remarks>
            If we specify a parameter for every predicate, then the Lambda expression scope
            will be out of the WHERE query that gets generated.
            </remarks>
            <param name="source"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Predicate(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String,System.Object,Syncfusion.DataSource.FilterType,Syncfusion.DataSource.FilterBehavior,System.Boolean,System.Type)">
            <summary>
            Predicate is a Binary expression that needs to be built for a single or a series
            of values that needs to be passed on to the WHERE expression. 
            <para></para>
            <para></para>
            <code lang="C#">var binaryExp = queryable.Predicate(parameter,
            &quot;EmployeeID&quot;, &quot;4&quot;, true);</code>
            </summary>
            <remarks>
            First create a ParameterExpression using the Parameter extension function, then
            use the same ParameterExpression to generate the predicates.
            </remarks>
            <param name="source"></param>
            <param name="paramExpression"></param>
            <param name="propertyName"></param>
            <param name="constValue"></param>
            <param name="filterType"></param>
            <param name="filterBehaviour"></param>
            <param name="isCaseSensitive"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Select(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a Select query for a single property value.
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType">Type</param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Select(System.Linq.IQueryable,System.String[])">
            <summary>
            Generates a Select query based on the properties passed. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var selector = queryable.Select(new string[]{
            &quot;OrderID&quot;, &quot;ShipCountry&quot; });</code>
            </summary>
            <param name="source"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Select(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{System.String},System.Type)">
            <summary>
            Generates a Select query based on the properties passed. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var selector = queryable.Select(new List&lt;string&gt;() {
            &quot;OrderID&quot;, &quot;ShipCountry&quot; });</code>
            <para></para>
            <para>It returns a dynamic class generated thru ReflectionEmit, Use reflection
            to identify the properties and values.</para>
            </summary>
            <param name="source"></param>
            <param name="properties"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Skip(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Generates a SKIP expression in the IQueryable source.
            </summary>
            <param name="source">The source.</param>
            <param name="constValue">The const value.</param>
            <param name="sourceType">Type</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.GetDelegateInvokeExpressionAggregateFunc``1(System.Linq.Expressions.ParameterExpression,System.String,System.Delegate)">
            <summary>
            Use this method with a cached delegate, this improves performance when using complex Expressions.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="paramExp"></param>
            <param name="propertyName"></param>
            <param name="expressionFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Take(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Generates a TAKE expression in the IQueryable source.
            </summary>
            <param name="source">The source.</param>
            <param name="constValue">The const value.</param>
            <param name="sourceType">Type</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a ThenBy query for the Queryable source. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
                        sortedOrders = sortedOrders.ThenBy(&quot;ShipCity&quot;);</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an ThenBy query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().ThenBy(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an ThenByDescending query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().ThenByDescending(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a ThenByDescending query for the Queryable source. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
                        sortedOrders = sortedOrders.ThenByDescending(&quot;ShipCity&quot;);</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Where(System.Linq.IQueryable,System.String,System.Object,Syncfusion.DataSource.FilterType,System.Boolean,System.Type)">
            <summary>
            Generates the where expression.
            <para></para>
            <code lang="C#">            var nw = new Northwind(@&quot;Data Source =
            Northwind.sdf&quot;);
                        IQueryable queryable = nw.Orders.AsQueryable();
                        var filters = queryable.Where(&quot;ShipCountry&quot;,
            &quot;z&quot;, FilterType.Contains);
                        foreach (Orders item in filters)
                        {
                            Console.WriteLine(&quot;{0}/{1}&quot;, item.OrderID,
            item.ShipCountry);
                        }</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName">Name of the property.</param>
            <param name="value"></param>
            <param name="filterType"></param>
            <param name="isCaseSensitive"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.QueryableExtensions.Where(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Use this function to generate WHERE expression based on Predicates. The
            AndPredicate and OrPredicate should be used in combination to build the
            predicate expression which is finally passed on to this function for creating a
            Lambda. 
            <para></para>
            <para></para>
            <para></para>DataClasses1DataContext db = new DataClasses1DataContext();
            <para></para>            var orders = db.Orders.Skip(0).Take(100).ToList();
            <para></para>            var queryable = orders.AsQueryable();
            <para></para>            var parameter =
            queryable.Parameter(&quot;ShipCountry&quot;);
            <para></para>            var binaryExp = queryable.Predicate(parameter,
            <para></para>&quot;ShipCountry&quot;, &quot;USA&quot;, true);
            <para></para>            var filteredOrders = queryable.Where(parameter,
            binaryExp);
            <para></para>            foreach (var order in filteredOrders)
            <para></para>            {
            <para></para>                Console.WriteLine(order);
            <para></para>            }
            <para></para>
            <para></para>
            <para></para>Build Predicates for Contains / StartsWith / EndsWith,
            <para></para>
            <para></para>            IQueryable queryable = nw.Orders.AsQueryable();
            <para></para>            var parameter = queryable.Parameter();
            <para></para>            var exp1 = queryable.Predicate(parameter,
            &quot;ShipCountry&quot;, &quot;h&quot;, FilterType.Contains);
            <para></para>            var exp2 = queryable.Predicate(parameter,
            &quot;ShipCountry&quot;, &quot;a&quot;, FilterType.StartsWith);
            <para></para>            var andExp = exp2.OrPredicate(exp1);
            <para></para>            var filters = queryable.Where(parameter, andExp);
            <para></para>            foreach (Orders item in filters)
            <para></para>            {
            <para></para>                Console.WriteLine(&quot;{0}/{1}&quot;,
            item.OrderID, item.ShipCountry);
            <para></para>            }
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="paramExpression"></param>
            <param name="predicateExpression"></param>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.GroupResult.Expand">
            <summary>
            Expands the group. 
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.Extensions.GroupResult.Collapse">
            <summary>
            Collapses the group.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.Extensions.GroupResult.Key">
            <summary>
            Gets or sets the Key of the group.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.Extensions.GroupResult.Count">
            <summary>
            Gets the number of items in this group.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.Extensions.GroupResult.Items">
            <summary>
            Gets the collection of items in this group.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.Extensions.GroupResult.SubGroups">
            <summary>
            Gets the collection of sub groups within this group.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.Extensions.GroupResult.IsExpand">
            <summary>
            Checks whether group is expanded or not.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.GroupList">
            <summary>
            Collection of <see cref="T:Syncfusion.DataSource.Extensions.GroupResult"/> 
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.GroupList.#ctor(Syncfusion.DataSource.DataSource)">
            <summary>
            Initializes the <see cref="T:Syncfusion.DataSource.GroupList"/> 
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.GroupList.RefreshSortingOrderForGroups(System.Collections.Generic.List{Syncfusion.DataSource.Extensions.GroupResult},Syncfusion.DataSource.SortDescriptor,System.Collections.Generic.IComparer{Syncfusion.DataSource.Extensions.GroupResult})">
            <summary>
            Compare and sort the groups.
            </summary>
            <param name="group">Indicates the list of groups</param>
            <param name="sortKey">Indicates the <see cref="T:Syncfusion.DataSource.SortDescriptor"/> </param>
            <param name="groupComparer">Indicates the group comparer.</param>
        </member>
        <member name="M:Syncfusion.DataSource.GroupList.AddItemInGroup(System.Object,System.Int32)">
            <summary>
            Adds item to the <see cref="T:Syncfusion.DataSource.GroupList"/> 
            </summary>
            <param name="item">object to be added in <see cref="T:Syncfusion.DataSource.GroupList"/> </param>
            <param name="index">index of the object </param>
        </member>
        <member name="M:Syncfusion.DataSource.GroupList.RemoveItemInGroup(System.Object)">
            <summary>
            Removes item from the  <see cref="T:Syncfusion.DataSource.GroupList"/> 
            </summary>
            <param name="item">object to be removed from the <see cref="T:Syncfusion.DataSource.GroupList"/> </param>
        </member>
        <member name="P:Syncfusion.DataSource.IFilterDefinition.MappingName">
            <summary>
            Gets or sets the name of the mapping.
            </summary>
            <value>The name of the mapping.</value>
        </member>
        <member name="P:Syncfusion.DataSource.IFilterDefinition.FilterPredicates">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:Syncfusion.DataSource.IFilterDefinition.FilterBehavior">
            <summary>
            Gets or sets the Filter behavior for the column.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:Syncfusion.DataSource.FilterPredicate">
            <summary>
            Holds values for Filtering.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.FilterPredicate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.DataSource.FilterPredicate"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.FilterPredicate.FilterType">
            <summary>
            Gets or sets the type of the filter.
            </summary>
            <value>The type of the filter.</value>
        </member>
        <member name="P:Syncfusion.DataSource.FilterPredicate.FilterValue">
            <summary>
            Gets or sets the filter value.
            </summary>
            <value>The filter value.</value>
        </member>
        <member name="P:Syncfusion.DataSource.FilterPredicate.PredicateType">
            <summary>
            Gets or sets the type of the predicate.
            </summary>
            <value>The type of the predicate.</value>
        </member>
        <member name="P:Syncfusion.DataSource.FilterPredicate.FilterBehavior">
            <summary>
            Gets or sets the type of the filter behavior.
            </summary>
            <value>The type of the predicate.</value>
        </member>
        <member name="P:Syncfusion.DataSource.FilterPredicate.IsCaseSensitive">
            <summary>
            Gets or sets a value indicating whether this instance is case sensitive.
            </summary>
            <value>
            <b>true</b> if this instance is case sensitive; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Syncfusion.DataSource.PredicateType">
            <summary>
            Predicate type defined for Filters.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.PredicateType.And">
            <summary>
            Does an AND operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.PredicateType.Or">
            <summary>
            Does an OR operation on filters.
            </summary>
        </member>
        <member name="T:Syncfusion.DataSource.FilterOperatorType">
            <summary>
            Default Filter Operator is defined for Filters.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterOperatorType.Equals">
            <summary>
            Does an Equals operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterOperatorType.StartsWith">
            <summary>
            Does an StartsWith operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.FilterOperatorType.Contains">
            <summary>
            Does an Contains operation on filters.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.GroupDescriptor.#ctor">
            <summary>
            Initializes the <see cref="T:Syncfusion.DataSource.GroupDescriptor"/> 
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.GroupDescriptor.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:Syncfusion.DataSource.GroupDescriptor"/> 
            </summary>
            <param name="propertyname">Property name</param>
        </member>
        <member name="M:Syncfusion.DataSource.GroupDescriptor.#ctor(System.String,System.Func{System.Object,System.Object})">
            <summary>
            Initializes the <see cref="T:Syncfusion.DataSource.GroupDescriptor"/> 
            </summary>
            <param name="propertyname">Property Name</param>
            <param name="keySelector">Key selector</param>
        </member>
        <member name="P:Syncfusion.DataSource.GroupDescriptor.KeySelector">
            <summary>
            Gets or sets the KeySelector.Groups are created based on the key return.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.GroupDescriptor.PropertyName">
            <summary>
            Gets or sets the Property Name
            </summary>
            <value> string </value>
        </member>
        <member name="P:Syncfusion.DataSource.GroupDescriptor.Comparer">
            <summary>
            Gets or sets the Comparer.
            </summary>
            <value>IComparer of GroupResult.</value>
        </member>
        <member name="T:Syncfusion.DataSource.PropertyChangingEventHandler">
            <summary>
            Represents the method that will handle the Syncfusion.Data.Portable.INotifyPropertyChanging.PropertyChanging
            event of an Syncfusion.Data.Portable.INotifyPropertyChanging interface.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:Syncfusion.Data.Portable.PropertyChangingEventArgs">PropertyChangingEventArgs</see> that contains the event data.</param>
            <remarks></remarks>
        </member>
        <member name="M:Syncfusion.DataSource.DataSourceHelper.GetGroupLastItem(Syncfusion.DataSource.Extensions.GroupResult)">
            <summary>
            Returns the last item of the group
            </summary>
            <param name="group"> <see cref="T:Syncfusion.DataSource.Extensions.GroupResult"/>.</param>
            <returns> The object</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataSourceHelper.GetGroupLastItem(System.Collections.Generic.List{Syncfusion.DataSource.Extensions.GroupResult})">
            <summary>
            Returns the last item from the list of groups
            </summary>
            <param name="groupList"> The list of groups</param>
            <returns>The object</returns>
        </member>
        <member name="M:Syncfusion.DataSource.SortDescriptor.#ctor">
            <summary>
            Initializes the <see cref="T:Syncfusion.DataSource.SortDescriptor"/> 
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.SortDescriptor.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:Syncfusion.DataSource.SortDescriptor"/> 
            </summary>
            <param name="propertyname">Property name</param>
        </member>
        <member name="M:Syncfusion.DataSource.SortDescriptor.#ctor(System.String,Syncfusion.DataSource.ListSortDirection)">
            <summary>
            Initializes the <see cref="T:Syncfusion.DataSource.SortDescriptor"/> 
            </summary>
            <param name="propertyname">Property name</param>
            <param name="direction">The sort direction</param>
        </member>
        <member name="P:Syncfusion.DataSource.SortDescriptor.Direction">
            <summary>
            Gets or sets the Sorting Direction
            </summary>
            <value>The List Sort Direction.</value>
        </member>
        <member name="P:Syncfusion.DataSource.SortDescriptor.PropertyName">
            <summary>
            Gets or sets the Property Name
            </summary>
            <value> string </value>
        </member>
        <member name="P:Syncfusion.DataSource.SortDescriptor.Comparer">
            <summary>
            Gets or sets the Comparer.
            </summary>
            <value>IComparer of object.</value>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.NotifyPropertyChangedHandler(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the source property change
            </summary>
            <param name="sender"> The object.</param>
            <param name="e">PropertyChangedEventArgs</param>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.GetValue(System.Object,System.String)">
            <summary>
            Gets the value of property from the given object
            </summary>
            <param name="dataSource"><see cref="T:Syncfusion.DataSource.DataSource"/>.</param>
            <param name="item">The object</param>
            <param name="propertyName">Property name</param>
            <returns>The value</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.Refresh">
            <summary>
            Refreshes the <see cref="T:Syncfusion.DataSource.DataSource"/>
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.DeferRefresh">
            <summary>
            Refresh the <see cref="T:Syncfusion.DataSource.DataSource"/> and halt 
            </summary>
            <returns> IDispose</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.RefreshFilter">
            <summary>
            Refresh the <see cref="T:Syncfusion.DataSource.DataSource"/>. Raises the <see cref="!:Syncfusion.Data.DataSource.SfDataSource.FilterChanged"/> Event 
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.BeginInit">
            <summary>
            Suspend the events and initiate changes
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.EndInit">
            <summary>
            End Suspending events and changes and deferRefresh the <see cref="T:Syncfusion.DataSource.DataSource"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.CancelEdit">
            <summary>
            Cancel the the editing
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.GetItemAt(System.Int32)">
            <summary>
            Returns the item in the index
            </summary>
            <param name="index">The index of the item</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.EndEdit">
            <summary>
            End the editing of object
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.DataSource.IsInCommitEdit">
            <summary>
            Commits the edited object to the underlaying source
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.EditItem(System.Object)">
            <summary>
            Initiates the editing of an item
            </summary>
            <param name="item">Item to edit</param>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.AddNew">
            <summary>
            Adds the new object of source type to source
            </summary>
            <returns>The object added object</returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.GetSourceListCollection">
            <summary>
            Returns the IList of source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.CancelNew">
            <summary>
            Removes the added item
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.DataSource.CommitNew">
            <summary>
            Commits the newly added object to source
            </summary>
        </member>
        <member name="F:Syncfusion.DataSource.DataSource.currentAddItem">
            <summary>
            Returns currently added object
            </summary>
        </member>
        <member name="E:Syncfusion.DataSource.DataSource.SourcePropertyChanged">
            <summary>
            Occurs when source property Changed
            </summary>
        </member>
        <member name="E:Syncfusion.DataSource.DataSource.SourceCollectionChanged">
            <summary>
            Occurs when source collection changed
            </summary>
        </member>
        <member name="E:Syncfusion.DataSource.DataSource.FilterChanged">
            <summary>
            Occurs when filter changed
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.IsDynamicBound">
            <summary>
            Gets a value indicating whether this instance is dynamic bound.
            </summary>
            <value>
            <b>true</b> if this instance is dynamic bound; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.FilterPredicates">
            <summary>
            Gets or sets the filter predicates.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.AutoExpandGroups">
            <summary>
            Checks whether groups has to expand automatically or not.
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.DisplayItems">
            <summary>
            Returns the list of items to be displayed 
            </summary>
            <value>The display items.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.Filter">
            <summary>
            Gets or sets the filter for the underlying collection
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.GroupDescriptors">
            <summary>
            Gets the collection of group descriptors.
            </summary>
            <value>The group descriptor.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.Groups">
            <summary>
            Gets the list of groups 
            </summary>
            <value>The Group List.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.Source">
            <summary>
            Gets or sets the Source of the <see cref="T:Syncfusion.DataSource.DataSource"/>.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.Items">
            <summary>
            Gets the list of items. Contains filtered data 
            </summary>
            <value>The List of items.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.LiveDataUpdateMode">
            <summary>
            Gets or sets the live data update mode of the <see cref="T:Syncfusion.DataSource.DataSource"/>.
            </summary>
            <value>The live data update mode.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.SortDescriptors">
            <summary>
            Gets the collection of sort descriptors. 
            </summary>
            <value>The collection of sort descriptor.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.SortComparer">
            <summary>
            Gets or sets the SortComparer.This will be considered when comparer in <see cref="T:Syncfusion.DataSource.SortDescriptor"/> is null.
            </summary>
            <value>IComparer of object.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.SourceType">
            <summary>
            Retuns the source type of the undelaying source
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.GroupComparer">
            <summary>
            Gets or sets the GroupComparer.This will be considered when  comparer in <see cref="T:Syncfusion.DataSource.GroupDescriptor"/> is null.
            </summary>
            <value>IComparer of GroupResult.</value>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.CanCancelEdit">
            <summary>
            Check whether editing can be cancelled or not 
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.CurrentEditItem">
            <summary>
            Current editing item 
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.IsEditingItem">
            <summary>
            Returns whether is in editing or not 
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.CanAddNew">
            <summary>
            Returns whether new object can be added or not
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.CanRemove">
            <summary>
            Checks whether object can be removed from source
            </summary>
        </member>
        <member name="P:Syncfusion.DataSource.DataSource.IsAddingNew">
            <summary>
            Returns whether adding new object or not
            </summary>
        </member>
        <member name="M:Syncfusion.DataSource.PropertyInfoExtensions.GetPropertyDescriptor(Syncfusion.DataSource.PropertyInfoCollection,System.String)">
            <summary>
            Generate the Property Descriptor for corresponding Property it may be simple or complex property
            </summary>
            <param name="pdc"></param>
            <param name="columnName"></param>        
            <returns></returns>
        </member>
    </members>
</doc>
